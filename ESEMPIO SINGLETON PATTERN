
DEFINIZIONE DI SINGLETON ABSTRACT CLASS:
Classe che NON può essere istanziata, ma le classi che la "ereditano (con il simbolo :)" possono essere istanziate. 
Assicura che le classi "ereditanti" possano essere istanziate solo e soltanto una volta durante l'esecuzione del programma.
	
GAME MANAGER, Player, AUDIO MANAGER e MANAGER che gestiscono la logica del software sono esempi di classi
che devono poter essere istanziate solo una volta durante l'esecuzione del software.

IN QUESTO ESEMPIO:

Viene controllato se c'è già un'istanza attiva della classe/oggetto/componente.
Se "instance" è nulla (quindi già esiste) crea un'istanza della classe/oggetto/componente passato al singleton (this as T).
Altrimenti distrugge l'oggetto duplicato.
	

public abstract class Singleton<T> : MonoBehaviour where T : Component
{	
    private static T instance;
    
    public static T Instance
    {
  	get { return instance;}  
    }
    
    protected virtual void Awake()
    {
        if (Instance == null) 
	{
           Instance = this as T;
        }
	else
	{
	   Destroy(gameObject);
	}
}


ESEMPIO DI CLASSE CHE EREDITA IL SINGLETON <di tipo Player>:
SICCOME QUESTA CLASSE EREDITA LA CLASSE SINGLETON, QUANDO VIENE CREATO UN OGGETTO VIENE ANCHE ESEGUITO IL CODICE
ALL'INTERNO DELLA CLASSE SINGLETON. SE VENGONO CREATE DUE ISTANTE DI QUESTA CLASSE/OGGETTO, UNA VERRA' ELIMINATA.

public class Player : Singleton<Player>
{
   //..codice
}
